// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  info
  url
  type
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?
  Agency       Agency         @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permisson    Permissions[]
  Tickets      Ticket[]
  Notification Notification[]

  @@index([agencyId])
}

model Permissions {
  id           String     @id @default(uuid())
  email        String
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccount       SubAccount[]
  SidebarOption    AgencySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String                    @db.Text
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String                    @db.Text
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[]
  Media            Media[]
  Contact          Contact[]
  Tag              Tag[]
  Pipeline         Pipeline[]
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?

  @@index([subAccountId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  subAccountId  String
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([subAccountId])
}

model Tag {
  id           String     @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model Ticket {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Tag       Tag?     @relation(fields: [tagId], references: [id])
  tagId     String?
  Lane      Lane?    @relation(fields: [laneId], references: [id])
  laneId    String?
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])
  agencyId  String?
}

model FunnelPage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  Funnel    Funnel?  @relation(fields: [funnelId], references: [id])
  funnelId  String?
}

model ClassName {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  Funnel    Funnel?  @relation(fields: [funnelId], references: [id])
  funnelId  String?
}

model Media {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id])
  subAccountId String?
}

model Contact {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id])
  subAccountId String?
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  Agency    Agency?  @relation(fields: [agencyId], references: [id])
  agencyId  String?
}

model Invitation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  Agency    Agency?  @relation(fields: [agencyId], references: [id])
  agencyId  String?
}

enum Plan {
  price_54455454
  price_5445545fds
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique
  agencyId             String?  @unique
  Agency               Agency?  @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}
